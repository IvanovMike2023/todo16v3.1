// import React from 'react';
// import ReactDOM from 'react-dom/client';
// import './index.css';
// import reportWebVitals from './reportWebVitals';
// import App from './app/App';
// import {Provider} from 'react-redux';
// import {store} from './app/store';
// import {BrowserRouter, createBrowserRouter, Navigate, RouterProvider} from "react-router-dom";
// import {Login} from "./components/Login/Login";
// import {TodolistsList} from "./features/TodolistsList/TodolistsList";
// import {ErrorPage} from "./components/ErrorPage/ErrorPage";
// const router = createBrowserRouter([
//     {
//         path: "/",
//         element: <App/>,
//         errorElement: <ErrorPage/>,
//         children: [
//             {
//                 index: true,
//                 element: <Navigate to="/todolists"/>
//             },
//             {
//                 path: "/login",
//                 element: <Login/>,
//             },
//             {
//                 path: "/todolists",
//                 element: <TodolistsList/>,
//             },
//         ],
//     },
// ]);
// const root = ReactDOM.createRoot(
//     document.getElementById('root') as HTMLElement
// );
//
// root.render(
//     <Provider store={store}>
//         {/*<App/>*/}
//         <RouterProvider router={router}/>
//     </Provider>
// );
//
// // If you want to start measuring performance in your app, pass a function
// // to log results (for example: reportWebVitals(console.log))
// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
// reportWebVitals();
//
// import axios from 'axios'
// import React, { ChangeEvent, useEffect, useState } from 'react'
// import ReactDOM from 'react-dom/client';
//
// // Types
// type CommentType = {
//     postId: string
//     id: string
//     name: string
//     email: string
//     body: string
// }
//
// // Api
// const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.io/api/'})
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>('comments')
//     },
//     createComment() {
//         const payload = {body: '–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –≤–∞–º'}
//         // Promise.resolve() —Å—Ç–æ–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã TS –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
//         // Promise.resolve() –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
//         return instance.post('comments', {body:payload.body})
//         //return Promise.resolve().
//     }
// }
//
//
// // App
// export const App = () => {
//
//     const [comments, setComments] = useState<CommentType[]>([])
//
//     useEffect(() => {
//         commentsAPI.getComments()
//             .then((res) => {
//                 setComments(res.data)
//             })
//     }, [])
//
//     const createPostHandler = () => {
//         commentsAPI.createComment()
//             .then((res: any) => {
//                 const newComment = res.data
//                 console.log(newComment)
//                 setComments([newComment, ...comments,])
//             })
//     };
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             <div style={{marginBottom: '15px'}}>
//                 <button style={{marginLeft: '15px'}}
//                         onClick={() => createPostHandler()}>
//                     –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
//                 </button>
//             </div>
//
//             {
//                 comments.map(c => {
//                     return <div key={c.id}><b>Comment</b>: {c.body} </div>
//                 })
//             }
//         </>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<App/>)



// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
// –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return Promise.resolve(payload)

//
// import { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type TodoType = {
//     id: string;
//     title: string;
//     order: number;
//     createdAt: string;
//     updatedAt: string;
//     completed: boolean;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const todosAPI = {
//     getTodos() {
//         return instance.get<TodoType[]>("todos");
//     },
//     changeTodoStatus(id: string, completed: boolean) {
//         return instance.put(`todos/${id}`, { completed });
//     },
// };
//
// // Reducer
// const initState = [] as TodoType[];
//
// type InitStateType = typeof initState;
//
// const todosReducer = (state: InitStateType = initState, action: ActionsType) => {
//     switch (action.type) {
//         case "TODOS/GET-TODOS":
//             return action.todos;
//
//         case "TODOS/CHANGE-TODO-STATUS":
//             return state.map((t) => {
//                 if (t.id === action.todo.id) {
//                     return { ...t, completed: action.todo.completed };
//                 } else {
//                     return t;
//                 }
//             });
//
//         default:
//             return state;
//     }
// };
//
// const getTodosAC = (todos: TodoType[]) => ({ type: "TODOS/GET-TODOS", todos }) as const;
// const changeTodoStatusAC = (todo: TodoType) =>
//     ({ type: "TODOS/CHANGE-TODO-STATUS", todo }) as const;
// type ActionsType = ReturnType<typeof getTodosAC> | ReturnType<typeof changeTodoStatusAC>;
//
// // Thunk
// const getTodosTC = (): AppThunk => (dispatch) => {
//     todosAPI.getTodos().then((res) => {
//         console.log(res)
//         dispatch(getTodosAC(res.data));
//     });
// };
//
// const changeTodoStatusTC =
//     (id: string, completed: boolean): AppThunk =>
//         (dispatch) => {
//             todosAPI.changeTodoStatus(id, completed).then((res) => {
//                 console.log(res)
//                 dispatch(changeTodoStatusAC(res.data));
//             });
//         };
//
// // Store
// const rootReducer = combineReducers({
//     todos: todosReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch();
//     const todos = useAppSelector((state) => state.todos);
//     console.log(todos)
//     useEffect(() => {
//         dispatch(getTodosTC());
//     }, []);
//
//     const changeStatusHandler = (id: string, completed: boolean) => {
//         dispatch(changeTodoStatusTC(id, completed));
//     };
//
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {todos.length ? (
//                 todos.map((t) => {
//                     return (
//                         <div style={t.completed ? { color: "grey" } : {}} key={t.id}>
//                             <input
//                                 type="checkbox"
//                                 checked={t.completed}
//                                 onChange={() => changeStatusHandler(t.id, !t.completed)}
//                             />
//                             <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                         </div>
//                     );
//                 })
//             ) : (
//                 <h2>–¢—É–¥—É–ª–∏—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
//             )}
//         </>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

//
// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName: string
//     email: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             email: '',
//         },
//         validate: (values) => {
//             const errors: Partial<LoginFieldsType> = {};
//
//             if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
//                 errors.email = 'Invalid email address';
//             }
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     // –§—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±—à—Ç–æ—Ä–º –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ true –≤ JSX
//     const getTrue = () => {
//         return true
//     }
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}{...formik.getFieldProps('email')}/>
//                 {formik.touched.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–≥—Ä—É–∑–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º email, –Ω–æ –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ 46 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã:
// 1) –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ email –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// 2) –í–º–µ—Å—Ç–æ ERROR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—é.
// 3) –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –ø–æ–ª–µ–º.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {true && <div style={{color: 'red'}}>error.email</div>}
//
// import axios from "axios";
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type CommentType = {
//     postId: string;
//     id: string;
//     name: string;
//     email: string;
//     body: string;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const commentsAPI = {
//     getComments() {
//         return instance.get<CommentType[]>("comments");
//     },
// };
//
// // Reducer
// const initState = [] as CommentType[];
//
// type InitStateType = typeof initState;
//
// const commentsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "COMMENTS/GET-COMMENTS":
//             return action.comments;
//         default:
//             return state;
//     }
// };
//
// const getCommentsAC = (comments: CommentType[]) =>
//     ({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
// type ActionsType = ReturnType<typeof getCommentsAC>;
// //ReturnType<any>, RootState, unknown, ActionsType
// const getCommentsTC = (): ThunkAction<ReturnType<any>,RootState, unknown, ActionsType> => (dispatch) => {
//     commentsAPI.getComments().then((res) => {
//         dispatch(getCommentsAC(res.data));
//     });
// };
//
// // Store
// const rootReducer = combineReducers({
//     comments: commentsReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // App
// export const App = () => {
//     const comments = useAppSelector((state) => state.comments);
//     const dispatch = useAppDispatch();
//
//     useEffect(() => {
//         dispatch(getCommentsTC());
//     }, []);
//
//     return (
//         <>
//             <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
//             {comments.map((c) => {
//                 return (
//                     <div key={c.id}>
//                         <b>Comment</b>: {c.body}{" "}
//                     </div>
//                 );
//             })}
//         </>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void

//
// import React, { useState } from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import axios, { AxiosError } from "axios";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type NullableType<T> = null | T;
//
// type LoginFieldsType = {
//     email: string;
//     password: string;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const api = {
//     login(data: LoginFieldsType) {
//         return instance.post("auth/login", data);
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as NullableType<string>,
//     isLoggedIn: false,
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "APP/SET-IS-LOGGED-IN":
//             return { ...state, isLoggedIn: action.isLoggedIn };
//         case "APP/IS-LOADING":
//             return { ...state, isLoading: action.isLoading };
//         case "APP/SET-ERROR":
//             return { ...state, error: action.error };
//         default:
//             return state;
//     }
// };
//
// // Actions
// const setIsLoggedIn = (isLoggedIn: boolean) =>
//     ({ type: "APP/SET-IS-LOGGED-IN", isLoggedIn }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "APP/IS-LOADING", isLoading }) as const;
// const setError = (error: string | null) => ({ type: "APP/SET-ERROR", error }) as const;
// type ActionsType =
//     | ReturnType<typeof setIsLoggedIn>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>;
//
// // Thunk
// const loginTC =
//     (values: LoginFieldsType): AppThunk =>
//         (dispatch) => {
//             dispatch(setLoadingAC(true));
//             api
//                 .login(values)
//                 .then((res) => {
//                     dispatch(setIsLoggedIn(true));
//                     alert("–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ");
//                 })
//                 .catch((e) => {
//                     dispatch(setError(e.response.data.errors))
//                     console.log(e.response.data.errors)
//                     console.log('e')
//                 })
//                 .finally(() => {
//                     dispatch(setLoadingAC(false));
//                 });
//         };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>;
// };
//
// // App
// export const App = () => {
//     const dispatch = useAppDispatch();
//
//     const [form, setForm] = useState<LoginFieldsType>({ email: "", password: "" });
//
//     const error = useAppSelector((state) => state.app.error);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//
//     const changeFormValuesHandler = (e: React.ChangeEvent<HTMLInputElement>, field: string) => {
//         if (field === "email") {
//             setForm({ ...form, email: e.currentTarget.value });
//         }
//         if (field === "password") {
//             setForm({ ...form, password: e.currentTarget.value });
//         }
//     };
//
//     const submitForm = (e: React.MouseEvent<HTMLButtonElement>) => {
//         e.preventDefault();
//         dispatch(loginTC(form));
//     };
//     return (
//         <div>
//             {error && <h2 style={{ color: "red" }}>{error}</h2>}
//             {isLoading && <Loader />}
//             <form>
//                 <div>
//                     <input
//                         placeholder={"–í–≤–µ–¥–∏—Ç–µ email"}
//                         value={form.email}
//                         onChange={(e) => changeFormValuesHandler(e, "email")}
//                     />
//                 </div>
//                 <div>
//                     <input
//                         type={"password"}
//                         placeholder={"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"}
//                         value={form.password}
//                         onChange={(e) => changeFormValuesHandler(e, "password")}
//                     />
//                 </div>
//                 <button type="submit" onClick={submitForm}>
//                     –ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
//                 </button>
//             </form>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏. –í–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// –£ –≤–∞—Å —ç—Ç–æ –Ω–∞–≤—Ä—è–¥ –ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è üòà, —Ç.–∫. –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.
// –û—Ç–∫—Ä–æ–π—Ç–µ Network –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å.
// –ó–∞–¥–∞—á–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä, –≥–æ–≤–æ—Ä—è—â—É—é –æ —Ç–æ–º —á—Ç–æ email –∏–ª–∏ password –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —ç—Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch('Error message')
// ‚ùó –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –Ω–µ –Ω–∞–¥–æ, —Ç.–∫. —Ç–∞–º –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω—é–∞–Ω—Å–æ–≤, –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É–∑–Ω–∞–µ—Ç–µ –ø–æ–∑–∂–µ
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import axios, { AxiosError } from "axios";
// import { configureStore, combineReducers, Dispatch } from "@reduxjs/toolkit";
//
// // TYPES
// type TodoType = {
//     id: string;
//     title: string;
//     order: number;
//     createdAt: string;
//     updatedAt: string;
//     completed: boolean;
// };
//
// type UserType = {
//     id: string;
//     name: string;
//     age: number;
// };
//
// type UsersResponseType = {
//     items: UserType[];
//     totalCount: number;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const api = {
//     getTodos() {
//         return instance.get<TodoType[]>("todos");
//     },
//     getUsers() {
//         return instance.get<UsersResponseType>("users");
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     todos: [] as TodoType[],
//     users: [] as UserType[],
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "APP/GET-TODOS":
//             return { ...state, todos: action.todos };
//         case "APP/GET-USERS":
//             return { ...state, users: action.users };
//         case "APP/IS-LOADING":
//             return { ...state, isLoading: action.isLoading };
//         case "APP/SET-ERROR":
//             return { ...state, error: action.error };
//         default:
//             return state;
//     }
// };
//
// const getUsersAC = (users: UserType[]) => ({ type: "APP/GET-USERS", users }) as const;
// const getTodosAC = (todos: TodoType[]) => ({ type: "APP/GET-TODOS", todos }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "APP/IS-LOADING", isLoading }) as const;
// const setError = (error: string | null) => ({ type: "APP/SET-ERROR", error }) as const;
//
// type ActionsType =
//     | ReturnType<typeof getUsersAC>
//     | ReturnType<typeof getTodosAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>;
//
// // Utils functions
// function baseSuccessHandler<T>(dispatch: Dispatch, actionCreator: Function, data: T) {
//     dispatch(actionCreator(data));
//     dispatch(setLoadingAC(false));
// }
//
// // Thunk
// const getTodosTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true));
//     api
//         .getTodos()
//         .then((res) => {
//             // console.log(res.data)
//             // dispatch(getTodosAC(res.data))
//             baseSuccessHandler(dispatch,getTodosAC,res.data)
//             // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setError(e.message));
//             dispatch(setLoadingAC(false));
//         });
// };
//
// const getUsersTC = (): AppThunk => (dispatch) => {
//     dispatch(setLoadingAC(true));
//     api
//         .getUsers()
//         .then((res) => {
//             //console.log(res.data.items)
//             baseSuccessHandler(dispatch,getUsersAC,res.data.items)
//             // ‚ùó‚ùó‚ùó YYY ‚ùó‚ùó‚ùó
//         })
//         .catch((e: AxiosError) => {
//             dispatch(setError(e.message));
//             dispatch(setLoadingAC(false));
//         });
// };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // COMPONENTS
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>;
// };
//
// const App = () => {
//     return (
//         <>
//             <h1>‚úÖTodos & üôÇUsers</h1>
//             <div style={{ display: "flex", justifyContent: "space-evenly" }}>
//                 <Todos />
//                 <Users />
//             </div>
//         </>
//     );
// };
//
// const Todos = () => {
//     const dispatch = useAppDispatch();
//     const todos = useAppSelector((state) => state.app.todos);
//     const error = useAppSelector((state) => state.app.error);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//
//     useEffect(() => {
//         dispatch(getTodosTC());
//     }, []);
//
//     return (
//         <div>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//             {isLoading && <Loader />}
//             {todos.map((t) => {
//                 return (
//                     <div style={t.completed ? { color: "grey" } : {}} key={t.id}>
//                         <input type="checkbox" checked={t.completed} />
//                         <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
//                     </div>
//                 );
//             })}
//         </div>
//     );
// };
//
// const Users = () => {
//     const dispatch = useAppDispatch();
//     const users = useAppSelector((state) => state.app.users);
//     const error = useAppSelector((state) => state.app.error);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//
//     useEffect(() => {
//         dispatch(getUsersTC());
//     }, []);
//
//     return (
//         <div>
//             <h2>üôÇ –°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤</h2>
//             {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//             {isLoading && <Loader />}
//             <div>
//                 {users.map((u) => {
//                     return (
//                         <div key={u.id}>
//                             <b>name</b>:{u.name} - <b>age</b>:{u.age}
//                         </div>
//                     );
//                 })}
//             </div>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ.
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É—Ö–æ–¥—è—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å —Ö–æ—Ä–æ—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏,
// –Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ Loader.
// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è baseSuccessHandler.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å Todos –∏ Users
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch(baseSuccessHandler(1,2,3))  dispatch(baseSuccessHandler(3,2,1)
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type PostDomainType = PostType & {
//     isDisabled: boolean;
// };
//
// type PostType = {
//     body: string;
//     id: string;
//     title: string;
//     userId: string;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>("posts");
//     },
//     deletePost(id: string) {
//         return instance.delete<{ message: string }>(`posts/${id}?delay=3`);
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     posts: [] as PostDomainType[],
// };
//
// type InitStateType = typeof initState;
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "POSTS/GET-POSTS":
//             return {
//                 ...state,
//                 posts: action.posts.map((t) => {
//                     return { ...t, isDisabled: false };
//                 }),
//             };
//
//         case "POSTS/DELETE-POST":
//             return { ...state, posts: state.posts.filter((t) => t.id !== action.id) };
//
//         case "POSTS/IS-LOADING":
//             return { ...state, isLoading: action.isLoading };
//
//         case "POSTS/IS-DISABLED":
//             return {
//                 ...state,
//                 posts: state.posts.map((t) => {
//                     if (t.id === action.id) {
//                         return { ...t, isDisabled: action.isDisabled };
//                     } else {
//                         return t;
//                     }
//                 }),
//             };
//
//         default:
//             return state;
//     }
// };
//
// const getPostsAC = (posts: PostType[]) => ({ type: "POSTS/GET-POSTS", posts }) as const;
// const deletePostAC = (id: string) => ({ type: "POSTS/DELETE-POST", id }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "POSTS/IS-LOADING", isLoading }) as const;
// const setIsDisabled = (isDisabled: boolean, id: string) =>
//     ({ type: "POSTS/IS-DISABLED", isDisabled, id }) as const;
// type ActionsType =
//     | ReturnType<typeof getPostsAC>
//     | ReturnType<typeof deletePostAC>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setIsDisabled>;
//
// // Thunk
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts().then((res) => {
//         dispatch(getPostsAC(res.data));
//     });
// };
//
// const deletePostTC =
//     (id: string): AppThunk =>
//         (dispatch) => {
//             dispatch(setIsDisabled(true, id));
//             dispatch(setLoadingAC(true));
//             postsAPI.deletePost(id).then((res) => {
//                 dispatch(deletePostAC(id));
//                 dispatch(setLoadingAC(false));
//             });
//         };
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>;
// };
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch();
//     const posts = useAppSelector((state) => state.posts.posts);
//     const isLoading = useAppSelector((state) => state.posts.isLoading);
//
//     useEffect(() => {
//         dispatch(getPostsTC());
//     }, []);
//
//     const deletePostHandler = (id: string) => {
//         dispatch(deletePostTC(id));
//     };
//
//     return (
//         <div>
//             <div style={{ position: "absolute", top: "0px" }}>{isLoading && <Loader />}</div>
//             <div style={{ marginTop: "100px" }}>
//                 <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//                 {posts.map((p) => {
//                     return (
//                         <div key={p.id}>
//                             <b>title</b>: {p.title}
//                             <button disabled={p.isDisabled} style={{ marginLeft: "15px" }} onClick={() => deletePostHandler(p.id)}>
//                                 —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
//                             </button>
//                         </div>
//                     );
//                 })}
//             </div>
//         </div>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
// –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Preview –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç "Post has been successfully deleted",
// –∞ —Å–ª–µ–¥—É—é—â–∏–µ "Post with id: 63626ac315d01f80765587ee does not exist"
// –¢.–µ. –±—ç–∫–µ–Ω–¥ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É–¥–∞–ª—è–µ—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç, —Ç.–∫. –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è,
// —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
// ‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–º–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞, –∞ –Ω–µ –≤—Å–µ –∫–Ω–æ–ø–∫–∏.
// –ù–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: style={{marginRight: '20px'}}


///------------------
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import {BrowserRouter, Route, Routes} from 'react-router-dom'
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={'/'} element={<Main/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ë–µ–ª—ã–π —ç–∫—Ä–∞–Ω... –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–æ—Å—å 2 –∑–∞–≥–æ–ª–æ–≤–∫–∞.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} component={<Main/>}/>
//
// import { useFormik } from "formik";
// import React from "react";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import ReactDOM from "react-dom/client";
// import { BrowserRouter, Route, Routes, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type LoginFieldsType = {
//     email: string;
//     password: string;
// };
//
// // API
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const api = {
//     login(data: LoginFieldsType) {
//         return instance.post("auth/login", data);
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     error: null as string | null,
//     isLoggedIn: false,
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "APP/SET-IS-LOGGED-IN":
//             return { ...state, isLoggedIn: action.isLoggedIn };
//         case "APP/IS-LOADING":
//             return { ...state, isLoading: action.isLoading };
//         case "APP/SET-ERROR":
//             return { ...state, error: action.error };
//         default:
//             return state;
//     }
// };
//
// // Actions
// const setIsLoggedIn = (isLoggedIn: boolean) =>
//     ({ type: "APP/SET-IS-LOGGED-IN", isLoggedIn }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "APP/IS-LOADING", isLoading }) as const;
// const setError = (error: string | null) => ({ type: "APP/SET-ERROR", error }) as const;
// type ActionsType =
//     | ReturnType<typeof setIsLoggedIn>
//     | ReturnType<typeof setLoadingAC>
//     | ReturnType<typeof setError>;
//
// // Thunk
// const loginTC =
//     (values: LoginFieldsType): AppThunk =>
//         (dispatch) => {
//             dispatch(setLoadingAC(true));
//             api
//                 .login(values)
//                 .then((res) => {
//                     dispatch(setIsLoggedIn(true));
//                     alert("–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ");
//                 })
//                 .catch((e) => {
//                     dispatch(setError(e.response.data.errors));
//                 })
//                 .finally(() => {
//                     dispatch(setLoadingAC(false));
//                     setTimeout(() => {
//                         dispatch(setError(null));
//                     }, 3000);
//                 });
//         };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Loader
// export const Loader = () => {
//     return <h1>Loading ...</h1>;
// };
//
// // Profile
// export const Profile = () => {
//     return <h2>üòé Profile</h2>;
// };
//
// // Login
// export const Login = () => {
//     const dispatch = useAppDispatch();
//     const navigate = useNavigate();
//
//     const error = useAppSelector((state) => state.app.error);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//     const isLoggedIn = useAppSelector((state) => state.app.isLoggedIn);
//
//     const formik = useFormik({
//         initialValues: {
//             email: "darrell@gmail.com",
//             password: "123",
//         },
//         onSubmit: (values) => {
//             dispatch(loginTC(values));
//         },
//     });
//     if(isLoggedIn) {navigate('profile')}
//     return (
//         <div>
//             {!!error && <h2 style={{ color: "red" }}>{error}</h2>}
//             {isLoading && <Loader />}
//             <form onSubmit={formik.handleSubmit}>
//                 <div>
//                     <input placeholder={"–í–≤–µ–¥–∏—Ç–µ email"} {...formik.getFieldProps("email")} />
//                 </div>
//                 <div>
//                     <input
//                         type={"password"}
//                         placeholder={"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"}
//                         {...formik.getFieldProps("password")}
//                     />
//                 </div>
//                 <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
//             </form>
//         </div>
//     );
// };
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={""} element={<Login />} />
//             <Route path={"profile"} element={<Profile />} />
//         </Routes>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <BrowserRouter>
//             <App />
//         </BrowserRouter>
//     </Provider>,
// );
// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             lastName: '',
//             email: '',
//             password: '',
//             phone: '',
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         },
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input
//                     name="firstName"
//                     onChange={formik.handleChange}
//                     value={formik.values.firstName}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="lastName"
//                     onChange={formik.handleChange}
//                     value={formik.values.lastName}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="email"
//                     onChange={formik.handleChange}
//                     value={formik.values.email}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.password}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                     type={'password'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.phone}
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω'}
//                 />
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ "–¢–µ–ª–µ—Ñ–æ–Ω–∞"
// –ù–∞–π–¥–∏—Ç–µ –≤ –∫–æ–¥–µ –æ—à–∏–±–∫—É. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <form onSubmit={formik.handleSubmit}>

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó Email –∏ password –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
// –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è" –∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ alert —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
// –ó–∞–¥–∞—á–∞: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.

// –ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: if (true) { console.log('hello') }


// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ firstName —Å–∏–º–≤–æ–ª—ã. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—Å—è.
// –ó–∞–¥–∞—á–∞: –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ, –ª–∏–±–æ —Ä–∞–≤–Ω–∞ 5 —Å–∏–º–≤–æ–ª–∞–º.
// –¢.–µ. –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è firstName.
// ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'Must be 5 characters or more'
// ‚ùó –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è).

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: if (true) { errors.firstName = 'Must be 5 characters or more' }
// ‚ùó –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä yup) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ

//+++
//------
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import {BrowserRouter, Navigate, Outlet, Route, Routes} from 'react-router-dom'
//
//
// export const PageNotFound = () => {
//     return <h2>‚õî 404. Page not found ‚õî</h2>
// }
//
// export const Profile = () => {
//     return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
// }
//
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//
//     return (
//
//         <Routes>
//             <Route path={'profile'} element={<Profile/>}/>
//             <Route path={'*'} element={<Navigate to={'profile'}/>}  />
//             {/* ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó  */}
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ –•–•–• –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–æ—É—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—É–¥–µ—Ç –≤ —É—Ä–ª–µ (login –∏–ª–∏ home –∏–ª–∏...)
// –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∏ –≤ —ç—Ç–æ –≤ —É—Ä–ª–µ –ø–æ –∏—Ç–æ–≥—É
// –±—ã–ª –∞–¥—Ä–µ—Å /profile

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} element={'to profile page'}/>
///-----
// import React, { useEffect } from "react";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import ReactDOM from "react-dom/client";
// import { BrowserRouter, Route, Routes } from "react-router-dom";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
// import {GetTasksResponse, ResponseType} from "./api/todolists-api";
// const instance = axios.create({
//     baseURL: 'https://social-network.samuraijs.com/api/1.1/',
//     withCredentials: true,
//     headers: {
//         'API-KEY': 'a2bc24bd-0a71-4fa5-ad1c-5b343082cdb6'
//     }
// })
// // Utils
//
// // Api
// // const instance = axios.create({
// //     baseURL: "xxx",
// // });
//
// const api = {
//     getUsers() {
//         return instance.get<GetTasksResponse>(`todo-lists/70530da6-46fa-4c86-9620-0698621c0cda/tasks`)
//     },
// };
//
// // Reducer
// const initState = {
//     isLoading: false,
//     users: [] as any[],
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "APP/SET-USERS":
//             /* 1 */
//             console.log(1)
//             return { ...state, users: action.users };
//         case "APP/IS-LOADING":
//             /* 2 */
//             console.log(2)
//             return { ...state, isLoading: action.isLoading };
//         default:
//             return state;
//     }
// };
//
// // Actions
// const setUsersAC = (users: any[]) => ({ type: "APP/SET-USERS", users }) as const;
// const setLoadingAC = (isLoading: boolean) => ({ type: "APP/IS-LOADING", isLoading }) as const;
// type ActionsType = ReturnType<typeof setUsersAC> | ReturnType<typeof setLoadingAC>;
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch) => {
//     /* 3 */
//     console.log('3')
//     dispatch(setLoadingAC(true));
//     api.getUsers().then((res) => {
//         /* 4 */
//         console.log(4)
//         dispatch(setLoadingAC(false));
//         /* 5 */
//         console.log(5)
//         dispatch(setUsersAC(res.data.items));
//     });
// };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Loader
// export const Loader = () => {
//     /* 6 */
//     console.log(6)
//     return <h1>Loading ...</h1>;
// };
//
// // Login
// export const Login = () => {
//     /* 7 */
//     console.log(7)
//     const users = useAppSelector((state) => state.app.users);
//     const isLoading = useAppSelector((state) => state.app.isLoading);
//
//     return (
//         <div>
//             {isLoading && <Loader />}
//             {users.map((u) => (
//                 <p key={u.id}>{u.email}</p>
//             ))}
//             <h1>
//                 –í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏
//                 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
//                 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
//             </h1>
//         </div>
//     );
// };
//
// // App
// export const App = () => {
//     /* 8 */
//     console.log(8)
//     const dispatch = useAppDispatch();
//
//     useEffect(() => {
//         /* 9 */
//         console.log(9)
//         dispatch(getUsersTC());
//     }, []);
//
//     /* 10 */
//     console.log(10)
//     return (
//         <Routes>
//             <Route path={""} element={<Login />} />
//         </Routes>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <BrowserRouter>
//             <App />
//         </BrowserRouter>
//     </Provider>,
// );
//8 10 7 9 3 2 7 6 4 2 5 1 7
// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 13 —á–∏—Å–µ–ª.
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1 2 3 4 5 6 7 8 9 10 1 2 3

//
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Navigate, Route, Routes } from 'react-router-dom'
//
//
// export const PageNotFound = () => {
//     return <h2>‚õî 404. Page not found ‚õî</h2>
// }
//
// export const Profile = () => {
//     return <h2>üòé –ü—Ä–æ—Ñ–∏–ª—å</h2>
// }
//
//
// export const Main = () => {
//     return (
//         <>
//             <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
//             <h2>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h2>
//         </>
//     )
// }
//
// // App
// export const App = () => {
//
//     return (
//         <Routes>
//             <Route path={'profile'} element={<Profile/>}/>
//             <Route path={'*'} element={<Navigate to={'profile'}/>}/>
//             {/* ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó  */}
//         </Routes>
//     )
// }
//
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ –•–•–• –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–æ—É—Ç —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ —á—Ç–æ–±—ã –±—É–¥–µ—Ç –≤ —É—Ä–ª–µ (login –∏–ª–∏ home –∏–ª–∏...)
// –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–ª–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∏ –≤ —ç—Ç–æ –≤ —É—Ä–ª–µ –ø–æ –∏—Ç–æ–≥—É
// –±—ã–ª –∞–¥—Ä–µ—Å /profile

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Route path={'/'} element={'to profile page'}/>
// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName: string
//     email: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//             email: '',
//         },
//         validate: (values) => {
//             const errors: Partial<LoginFieldsType> = {};
//
//             if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(values.email)) {
//                 errors.email = 'Invalid email address';
//             }
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//
//     // –§—É–Ω–∫—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–µ–±—à—Ç–æ—Ä–º –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ true –≤ JSX
//     const getTrue = () => {
//         return true
//     }
//     if(formik.errors){
//         //console.log(formik.errors)
//        // console.log(formik.touched)
//     }
//     console.log(formik.touched)
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}{...formik.getFieldProps('email')}/>
//                 {  formik.touched.email && formik.errors.email  && <div style={{color: 'red'}}>{formik.errors.email}</div>}
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–≥—Ä—É–∑–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ—à–∏–±–∫—É –ø–æ–¥ –ø–æ–ª–µ–º email, –Ω–æ –≤—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏.
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ 46 —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Ç–∞–∫, —á—Ç–æ–±—ã:
// 1) –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ email –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// 2) –í–º–µ—Å—Ç–æ ERROR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ–ª—é.
// 3) –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –º—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ —Å –ø–æ–ª–µ–º.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {true && <div style={{color: 'red'}}>error.email</div>}
//-----
//
// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             email: '',
//             password: '',
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//            // formik.resetForm();
//         },
//     });
//
//     return (
//         <form onSubmit={formik.handleSubmit} >
//             <div>
//                 <input
//                     name="email"
//                     onChange={formik.handleChange}
//                     value={formik.values.email}
//                     type="text"
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
//                 />
//             </div>
//             <div>
//                 <input
//                     name="password"
//                     onChange={formik.handleChange}
//                     value={formik.values.password}
//                     type="password"
//                     placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
//                 />
//             </div>
//             <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={'/'} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å alert c
// –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–æ –∏–∑-–∑–∞ –¥–æ–ø—É—â–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// ‚ùó–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª—Å—è alert —Ñ–æ—Ä–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <div onClick={handleClick}>
///-----


// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã –∏ –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å alert c
// –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –Ω–æ –∏–∑-–∑–∞ –¥–æ–ø—É—â–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// ‚ùó–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–ª—Å—è alert —Ñ–æ—Ä–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <div onClick={handleClick}>
// import React, { useEffect } from "react";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import ReactDOM from "react-dom/client";
// import { BrowserRouter, Route, Routes } from "react-router-dom";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
// import axios, { AxiosResponse } from 'axios'
// import {GetTasksResponse} from "./api/todolists-api";
//
// const instance = axios.create({
//     baseURL: 'https://social-network.samuraijs.com/api/1.1/',
//     withCredentials: true,
//     headers: {
//         'API-KEY': 'a2bc24bd-0a71-4fa5-ad1c-5b343082cdb6'
//     }
// })
// // Utils
// //console.log = () => {};
//
//
//
// // const api = {
// //     getUsers() {
// //         /* 1 */
// //         console.log(1)
// //         return instance.get("xxx");
// //     },
// // };
// const api = {
//     getUsers() {
//         console.log(1)
//         return instance.get<GetTasksResponse>(`todo-lists/70530da6-46fa-4c86-9620-0698621c0cda/tasks`)
//     },
// };
// // Reducer
// const initState = {
//     isLoading: false,
//     users: [] as any[],
// };
//
// type InitStateType = typeof initState;
//
// const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "APP/SET-USERS":
//             /* 2 */
//             console.log(2)
//             return { ...state, users: action.users };
//         default:
//             return state;
//     }
// };
//
// // Actions
// const setUsersAC = (users: any[]) => ({ type: "APP/SET-USERS", users }) as const;
// type ActionsType = ReturnType<typeof setUsersAC>;
//
// // Thunk
// const getUsersTC = (): AppThunk => (dispatch) => {
//     /* 3 */
//     console.log(3)
//     api.getUsers().then((res) => {
//         /* 4 */
//         console.log(4)
//         dispatch(setUsersAC(res.data.items));
//     });
// };
//
// // Store
// const rootReducer = combineReducers({
//     app: appReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // Login
// export const Login = () => {
//     const users = useAppSelector((state) => state.app.users);
//     /* 5 */
//     console.log(5)
//     console.log(6)
//     return (
//         <div>
//             {/* 6 */ }
//                        {
//                            users.map((u) => (
//                 <p key={u.id}>{u.email}</p>
//             ))}
//
//             <h1>
//                 –í –¥–∞–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Ä—É—á–∫—É, –ª–∏—Å—Ç–∏–∫ –∏
//                 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞—Å—Å—Ç–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
//                 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫-–≤–æ —Ü–∏—Ñ—Ä –∏ —Å–≤–µ—Ä—å—Ç–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π. –£–¥–∞—á–∏ üöÄ
//             </h1>
//         </div>
//     );
// };
//
// // App
// export const App = () => {
//     /* 7 */
//     console.log(7)
//     const dispatch = useAppDispatch();
//
//     useEffect(() => {
//         /* 8 */
//         console.log(8)
//         dispatch(getUsersTC());
//     }, []);
//
//     /* 9 */
//     console.log(9)
//     return (
//         <Routes>
//             <Route path={""} element={<Login />} />
//         </Routes>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <BrowserRouter>
//             <App />
//         </BrowserRouter>
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ó–∞–¥–∞—á–∞: –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∑–æ–≤—É—Ç—Å—è —á–∏—Å–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –±—É–¥–µ—Ç 11 —á–∏—Å–µ–ª.
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1 2 3 4 5 6 7 8 9 1 2
//////-------
// import { useFormik } from 'formik';
// import React from 'react'
// import ReactDOM from 'react-dom/client';
// import { BrowserRouter, Route, Routes } from 'react-router-dom'
//
//
// // Types
// type LoginFieldsType = {
//     firstName?: string
// }
//
// // Main
// export const Login = () => {
//
//     const formik = useFormik({
//         initialValues: {
//             firstName: '',
//         },
//         validate: (values) => {
//             const errors: LoginFieldsType = {};
//             if(values.firstName.length<5){
//                 errors.firstName='Must be 5 characters or more'
//             }
//             return errors
//         },
//         onSubmit: values => {
//             alert(JSON.stringify(values, null, 2));
//         }
//     });
//     console.log(formik.errors)
//     //console.log(formik.dirty)
//     return (
//         <form onSubmit={formik.handleSubmit}>
//             <div>
//                 <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
//             </div>
//             <button type="submit" disabled={!(formik.isValid && formik.dirty)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
//         </form>
//     );
// }
//
// // App
// export const App = () => {
//     return (
//         <Routes>
//             <Route path={''} element={<Login/>}/>
//         </Routes>
//     )
// }
//
// const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
// root.render(<BrowserRouter><App/></BrowserRouter>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ firstName —Å–∏–º–≤–æ–ª—ã. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—Å—è.
// –ó–∞–¥–∞—á–∞: –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ, –ª–∏–±–æ —Ä–∞–≤–Ω–∞ 5 —Å–∏–º–≤–æ–ª–∞–º.
// –¢.–µ. –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è firstName.
// ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'Must be 5 characters or more'
// ‚ùó –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è).

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: if (true) { errors.firstName = 'Must be 5 characters or more' }
// ‚ùó –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä yup) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ
////----
// import React, { useEffect } from "react";
// import ReactDOM from "react-dom/client";
// import { ThunkAction, ThunkDispatch } from "redux-thunk";
// import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
// import axios from "axios";
// import { configureStore, combineReducers } from "@reduxjs/toolkit";
//
// // Types
// type PostType = {
//     body: string;
//     id: string;
//     title: string;
//     userId: string;
// };
//
// type PayloadType = {
//     title: string;
//     body?: string;
// };
//
// // Api
// const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/" });
//
// const postsAPI = {
//     getPosts() {
//         return instance.get<PostType[]>("posts");
//     },
//     updatePostTitle(postId: string, post: PayloadType) {
//         return instance.put<PostType>(`posts/${postId}`, post);
//     },
// };
//
// // Reducer
// const initState = [] as PostType[];
//
// type InitStateType = typeof initState;
//
// const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
//     switch (action.type) {
//         case "POSTS/GET-POSTS":
//             return action.posts;
//
//         case "POSTS/UPDATE-POST-TITLE":
//             return state.map((p) => {
//                 if (p.id === action.post.id) {
//                     return { ...p, title: action.post.title };
//                 } else {
//                     return p;
//                 }
//             });
//
//         default:
//             return state;
//     }
// };
//
// const getPostsAC = (posts: PostType[]) => ({ type: "POSTS/GET-POSTS", posts }) as const;
// const updatePostTitleAC = (post: PostType) => ({ type: "POSTS/UPDATE-POST-TITLE", post }) as const;
// type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>;
//
// const getPostsTC = (): AppThunk => (dispatch) => {
//     postsAPI.getPosts().then((res) => {
//         dispatch(getPostsAC(res.data));
//     });
// };
//
// const updatePostTC =
//     (postId: string): AppThunk =>
//         (dispatch, getState: any) => {
//             try {
//                 const currentPost = getState().posts.find((p: PostType) => p.id === postId);
//                 if (currentPost) {
//                     const payload = { title: "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π title" };
//                     postsAPI.updatePostTitle(postId, payload).then((res) => {
//                         dispatch(updatePostTitleAC(res.data));
//                     });
//                 }
//             } catch (e) {
//                 alert("–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢");
//             }
//         };
//
// // Store
// const rootReducer = combineReducers({
//     posts: postsReducer,
// });
//
// const store = configureStore({ reducer: rootReducer });
// type RootState = ReturnType<typeof store.getState>;
// type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
// type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
// const useAppDispatch = () => useDispatch<AppDispatch>();
// const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
//
// // App
// const App = () => {
//     const dispatch = useAppDispatch();
//     const posts = useAppSelector((state) => state.posts);
//
//     useEffect(() => {
//         dispatch(getPostsTC());
//     }, []);
//
//     const updatePostHandler = (postId: string) => {
//         dispatch(updatePostTC(postId));
//     };
//
//     return (
//         <>
//             <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
//             {posts.map((p) => {
//                 return (
//                     <div key={p.id}>
//                         <b>title</b>: {p.title}
//                         <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
//                     </div>
//                 );
//             })}
//         </>
//     );
// };
//
// const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
// root.render(
//     <Provider store={store}>
//         <App />
//     </Provider>,
// );

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'}